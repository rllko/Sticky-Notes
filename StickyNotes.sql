  -- RIKKO, 2024

CREATE TABLE IF NOT EXISTS USERS
(
USER_ID BIGSERIAL PRIMARY KEY,
NAME VARCHAR(30) NOT NULL,
CREATED_DATE TIMESTAMP DEFAULT NOW()
);
    
CREATE TABLE IF NOT EXISTS NOTES
(
NOTE_ID BIGSERIAL PRIMARY KEY,
OWNER_ID INT,
CONTENT TEXT NOT NULL,
CATEGORY VARCHAR(30) NOT NULL,
CREATED_DATE TIMESTAMPTZ DEFAULT NOW(),
LAST_MODIFIED TIMESTAMPTZ,
FOREIGN KEY(OWNER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE
);
    
CREATE TABLE IF NOT EXISTS ACTION_LOGGER 
(
    ID BIGSERIAL PRIMARY KEY,
    AFFECTED_USER INT NOT NULL,
    AFFECTED_NOTE INT,
    ACTION_TYPE VARCHAR(30) NOT NULL CHECK(ACTION_TYPE IN ('UPDATE NOTE','DELETE NOTE','DELETE USER')),
    ACTION_DATE TIMESTAMPTZ DEFAULT NOW()
);

-- FUNCTIONS
CREATE OR REPLACE PROCEDURE POPULATE_DB()
LANGUAGE PLPGSQL AS $$
BEGIN
	INSERT INTO USERS(NAME) VALUES ('TEST USER 1');
	INSERT INTO USERS(NAME) VALUES ('TEST USER 2');
	INSERT INTO USERS(NAME) VALUES ('TEST USER 3');
	
	INSERT INTO NOTES(OWNER_ID,CONTENT,CATEGORY) VALUES (1,'TEST NOTE 1','TEST');
	INSERT INTO NOTES(OWNER_ID,CONTENT,CATEGORY) VALUES (1,'TEST NOTE 2','TEST');
	INSERT INTO NOTES(OWNER_ID,CONTENT,CATEGORY) VALUES (2,'TEST NOTE 3','BONKERS');
	INSERT INTO NOTES(OWNER_ID,CONTENT,CATEGORY) VALUES (2,'TEST NOTE 4','BONKERS');
	
	DELETE FROM USERS WHERE NAME = 'TEST USER 3';
END;$$;

CREATE OR REPLACE FUNCTION DELETE_USER()
RETURNS TRIGGER
LANGUAGE PLPGSQL AS $$
BEGIN
	INSERT INTO ACTION_LOGGER(AFFECTED_USER,ACTION_TYPE) VALUES (OLD.USER_ID,'DELETE USER');
	RETURN OLD;
END;$$;

CREATE OR REPLACE FUNCTION DELETE_NOTE()
RETURNS TRIGGER
LANGUAGE PLPGSQL AS $$
BEGIN
	INSERT INTO ACTION_LOGGER(AFFECTED_NOTE,AFFECTED_USER,ACTION_TYPE) VALUES (OLD.NOTE_ID,OLD.OWNER_ID,'DELETE NOTE');
	RETURN OLD;
END;$$;

CREATE OR REPLACE FUNCTION UPDATE_NOTE()
RETURNS TRIGGER
LANGUAGE PLPGSQL AS $$
BEGIN
    NEW.LAST_MODIFIED := NOW();
	
	INSERT INTO ACTION_LOGGER(AFFECTED_USER,AFFECTED_NOTE,ACTION_TYPE) VALUES (NEW.OWNER_ID,NEW.NOTE_ID,'UPDATE NOTE');
	RETURN NEW;
END;$$;

-- INDEXES 
CREATE INDEX NOTE_INDEX ON NOTES (OWNER_ID);

-- TRIGGERS

CREATE TRIGGER DELETE_NOTE_TRIGGER BEFORE DELETE ON NOTES FOR EACH ROW
EXECUTE FUNCTION DELETE_NOTE();

CREATE TRIGGER UPDATE_NOTE_TRIGGER BEFORE UPDATE ON NOTES FOR EACH ROW
EXECUTE FUNCTION UPDATE_NOTE();

CREATE TRIGGER DELETE_USER_TRIGGER BEFORE DELETE ON USERS FOR EACH ROW
EXECUTE FUNCTION DELETE_USER();

-- END

CALL POPULATE_DB();

SELECT * FROM ACTION_LOGGER;